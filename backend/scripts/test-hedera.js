require('dotenv').config();
const hederaClient = require('../src/config/hedera');

async function testHedera() {
  console.log('üîç Test de la configuration Hedera...\n');
  
  // V√©rifier les variables d'environnement
  console.log('üìã Configuration:');
  console.log('   HEDERA_ECDSA_ACCOUNT_ID:', process.env.HEDERA_ECDSA_ACCOUNT_ID ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('   HEDERA_ECDSA_PRIVATE_KEY:', process.env.HEDERA_ECDSA_PRIVATE_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('   HEDERA_TOPIC_ID:', process.env.HEDERA_TOPIC_ID || '‚ö†Ô∏è √Ä cr√©er');
  console.log('');
  
  // Tester la balance
  try {
    console.log('üí∞ Test de la balance...');
    const balance = await hederaClient.getBalance();
    console.log('   Balance HBAR:', balance);
  } catch (error) {
    console.error('‚ùå Erreur balance:', error.message);
  }
  
  // Cr√©er un topic si n√©cessaire
  if (!process.env.HEDERA_TOPIC_ID) {
    console.log('\nüìù Cr√©ation d\'un nouveau topic...');
    try {
      const topicId = await hederaClient.createTopic();
      console.log('‚úÖ Topic cr√©√©:', topicId);
      console.log('');
      console.log('‚ö†Ô∏è  IMPORTANT: Ajoutez cette ligne dans backend/.env :');
      console.log(`HEDERA_TOPIC_ID=${topicId}`);
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation topic:', error.message);
    }
  }
  
  // Tester l'envoi d'un message
  console.log('\nüì§ Test d\'envoi de message...');
  try {
    const result = await hederaClient.submitMessage(
      JSON.stringify({
        test: true,
        timestamp: new Date().toISOString(),
        message: 'Test FadjMa Hackathon'
      })
    );
    console.log('‚úÖ Message envoy√©:', result);
  } catch (error) {
    console.error('‚ùå Erreur envoi:', error.message);
  }
  
  console.log('\n‚ú® Test termin√©!');
  process.exit(0);
}

testHedera();