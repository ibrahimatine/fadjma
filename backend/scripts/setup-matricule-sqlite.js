const { sequelize } = require('../src/config/database');
const { Prescription } = require('../src/models');
const crypto = require('crypto');

async function setupMatriculeForSQLite() {
  console.log('üöÄ Configuration du syst√®me de matricules pour SQLite...');

  try {
    // V√©rifier la connexion √† la base
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base SQLite √©tablie.');

    // √âtape 1: V√©rifier si la colonne matricule existe
    const tableDescription = await sequelize.getQueryInterface().describeTable('Prescriptions');

    if (!tableDescription.matricule) {
      console.log('üìù Ajout de la colonne matricule...');
      await sequelize.getQueryInterface().addColumn('Prescriptions', 'matricule', {
        type: sequelize.Sequelize.DataTypes.STRING,
        allowNull: true,
        unique: false // On ajoutera l'unicit√© apr√®s
      });
      console.log('‚úÖ Colonne matricule ajout√©e.');
    } else {
      console.log('‚ÑπÔ∏è  La colonne matricule existe d√©j√†.');
    }

    // √âtape 2: Compter les prescriptions existantes sans matricule
    const prescriptionsWithoutMatricule = await Prescription.count({
      where: {
        matricule: null
      }
    });

    console.log(`üìä ${prescriptionsWithoutMatricule} prescriptions trouv√©es sans matricule.`);

    if (prescriptionsWithoutMatricule > 0) {
      console.log('üîß G√©n√©ration des matricules pour les prescriptions existantes...');

      // Traiter par petits lots pour √©viter les probl√®mes de m√©moire
      const batchSize = 50;
      let processed = 0;

      while (processed < prescriptionsWithoutMatricule) {
        const prescriptions = await Prescription.findAll({
          where: { matricule: null },
          limit: batchSize,
          offset: processed
        });

        if (prescriptions.length === 0) break;

        for (const prescription of prescriptions) {
          let matricule;
          let exists = true;
          let attempts = 0;
          const maxAttempts = 10;

          // G√©n√©rer un matricule unique avec retry logic
          while (exists && attempts < maxAttempts) {
            const date = prescription.issueDate
              ? new Date(prescription.issueDate).toISOString().slice(0, 10).replace(/-/g, '')
              : new Date().toISOString().slice(0, 10).replace(/-/g, '');
            const random = crypto.randomBytes(2).toString('hex').toUpperCase();
            matricule = `PRX-${date}-${random}`;

            // V√©rifier l'unicit√©
            const existing = await Prescription.findOne({ where: { matricule } });
            exists = !!existing;
            attempts++;
          }

          if (attempts >= maxAttempts) {
            console.error(`‚ùå Impossible de g√©n√©rer un matricule unique pour la prescription ${prescription.id}`);
            continue;
          }

          // Mettre √† jour directement avec une requ√™te SQL pour √©viter les hooks
          await sequelize.query(
            'UPDATE Prescriptions SET matricule = ? WHERE id = ?',
            {
              replacements: [matricule, prescription.id],
              type: sequelize.QueryTypes.UPDATE
            }
          );

          processed++;
          if (processed % 10 === 0) {
            console.log(`   üìà ${processed}/${prescriptionsWithoutMatricule} prescriptions trait√©es...`);
          }
        }
      }

      console.log(`‚úÖ ${processed} matricules g√©n√©r√©s avec succ√®s.`);
    }

    // √âtape 3: Cr√©er l'index unique
    console.log('üîß Cr√©ation de l\'index unique...');

    try {
      await sequelize.query('CREATE UNIQUE INDEX IF NOT EXISTS prescriptions_matricule_unique ON Prescriptions(matricule);');
      console.log('‚úÖ Index unique cr√©√©.');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è  L\'index unique existe d√©j√†.');
      } else {
        throw error;
      }
    }

    // √âtape 4: V√©rifications finales
    console.log('üîç V√©rifications finales...');

    const totalPrescriptions = await Prescription.count();
    const prescriptionsWithMatricule = await Prescription.count({
      where: {
        matricule: { [sequelize.Sequelize.Op.ne]: null }
      }
    });

    console.log(`üìä Total prescriptions: ${totalPrescriptions}`);
    console.log(`üìä Avec matricule: ${prescriptionsWithMatricule}`);

    if (prescriptionsWithMatricule < totalPrescriptions) {
      console.log(`‚ö†Ô∏è  ${totalPrescriptions - prescriptionsWithMatricule} prescriptions n'ont toujours pas de matricule.`);
    }

    // Tester l'unicit√©
    const duplicateCheck = await sequelize.query(`
      SELECT matricule, COUNT(*) as count
      FROM Prescriptions
      WHERE matricule IS NOT NULL
      GROUP BY matricule
      HAVING COUNT(*) > 1
    `, { type: sequelize.QueryTypes.SELECT });

    if (duplicateCheck.length > 0) {
      console.error('‚ùå Des matricules dupliqu√©s ont √©t√© d√©tect√©s:', duplicateCheck);
      throw new Error('Matricules dupliqu√©s d√©tect√©s');
    }

    console.log('‚úÖ Aucun matricule dupliqu√© d√©tect√©.');

    // Tester la g√©n√©ration pour une nouvelle prescription
    console.log('üß™ Test de cr√©ation d\'une nouvelle prescription...');

    const testPrescription = await Prescription.create({
      patientId: 'test-patient-' + Date.now(),
      doctorId: 'test-doctor-' + Date.now(),
      medication: 'Test Medication',
      dosage: '500mg',
      quantity: 30,
      issueDate: new Date()
    });

    if (!testPrescription.matricule) {
      throw new Error('Le hook beforeCreate ne fonctionne pas correctement');
    }

    console.log(`‚úÖ Test r√©ussi. Matricule g√©n√©r√©: ${testPrescription.matricule}`);

    // Nettoyer la prescription de test
    await testPrescription.destroy();

    console.log('\nüéâ Configuration du syst√®me de matricules termin√©e avec succ√®s !');
    console.log('\n‚ÑπÔ∏è  Prochaines √©tapes:');
    console.log('   1. Red√©marrer l\'application backend');
    console.log('   2. Tester la recherche par matricule dans le dashboard pharmacien');
    console.log('   3. V√©rifier les logs d\'audit');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error);
    console.error('\nüîß Actions de d√©pannage:');
    console.error('   1. V√©rifiez que la base SQLite est accessible');
    console.error('   2. V√©rifiez les permissions sur le fichier de base');
    console.error('   3. Consultez les logs pour plus de d√©tails');
    process.exit(1);
  }
}

// Fonction utilitaire pour v√©rifier l'√©tat du syst√®me
async function checkMatriculeSystem() {
  try {
    console.log('üîç V√©rification de l\'√©tat du syst√®me de matricules...');

    const stats = await Promise.all([
      Prescription.count(),
      Prescription.count({ where: { matricule: { [sequelize.Sequelize.Op.ne]: null } } }),
      sequelize.query("SELECT name FROM sqlite_master WHERE type='index' AND name='prescriptions_matricule_unique'",
        { type: sequelize.QueryTypes.SELECT }
      )
    ]);

    const [total, withMatricule, indexExists] = stats;

    console.log('\nüìä √âtat actuel:');
    console.log(`   Total prescriptions: ${total}`);
    console.log(`   Avec matricule: ${withMatricule}`);
    console.log(`   Index unique: ${indexExists.length > 0 ? '‚úÖ Existe' : '‚ùå Manquant'}`);
    console.log(`   Couverture: ${total > 0 ? Math.round((withMatricule / total) * 100) : 0}%`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

// Ex√©cuter le script selon les arguments
const args = process.argv.slice(2);

if (args.includes('--check')) {
  checkMatriculeSystem().then(() => process.exit(0));
} else {
  setupMatriculeForSQLite().then(() => process.exit(0));
}

module.exports = {
  setupMatriculeForSQLite,
  checkMatriculeSystem
};