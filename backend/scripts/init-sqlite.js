require('dotenv').config();
const { sequelize } = require('../src/models');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

async function initSQLite() {
  try {
    // Supprimer l'ancienne base si elle existe
    const dbPath = path.join(__dirname, '../data/database.sqlite');
    if (fs.existsSync(dbPath)) {
      console.log('üîÑ Suppression de l\'ancienne base...');
      fs.unlinkSync(dbPath);
    }

    console.log('üîÑ Cr√©ation de la nouvelle base SQLite...');

    // Cr√©er les tables avec le nouveau sch√©ma (incluant matricule)
    await sequelize.sync({ force: true });

    console.log('‚úÖ Base SQLite cr√©√©e avec succ√®s !');

    // Configuration automatique du syst√®me de matricules prescriptions
    console.log('üîß Configuration du syst√®me de matricules prescriptions...');
    await setupMatriculeSystem();

    // Configuration du syst√®me d'identifiants patients (tous les patients)
    console.log('üîß Configuration du syst√®me d\'identifiants patients...');
    await setupPatientIdentifierSystem();

    console.log('‚úÖ Syst√®mes configur√©s !');
    console.log('\nüìã Fonctionnalit√©s activ√©es:');
    console.log('   ‚úÖ G√©n√©ration automatique de matricules prescriptions (PRX-YYYYMMDD-XXXX)');
    console.log('   ‚úÖ G√©n√©ration automatique de matricules patients (PAT-YYYYMMDD-XXXX)');
    console.log('   ‚úÖ API de recherche par matricule pour pharmaciens');
    console.log('   ‚úÖ API de d√©livrance par matricule avec ancrage Hedera');
    console.log('   ‚úÖ Dashboard pharmacien avec onglets de recherche');
    console.log('   ‚úÖ Dispensation en lot avec ancrage blockchain');
    console.log('   ‚úÖ S√©curit√© et audit des acc√®s');
    console.log('   ‚úÖ Syst√®me d\'identifiants patients pour TOUS les patients');
    console.log('   ‚úÖ Liaison d\'identifiants pour cr√©ation de comptes patients');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('   1. npm run seed (pour donn√©es de test)');
    console.log('   2. npm start (d√©marrer le serveur)');
    console.log('   3. Tester la recherche et d√©livrance par matricule dans le dashboard pharmacien');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    console.error('\nD√©tails de l\'erreur:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    process.exit(1);
  }
}

async function setupMatriculeSystem() {
  try {
    // V√©rifier que les tables sont cr√©√©es
    const tables = await sequelize.getQueryInterface().showAllTables();
    console.log(`   üìä ${tables.length} tables cr√©√©es`);

    // V√©rifier la table Prescriptions
    if (!tables.includes('Prescriptions')) {
      throw new Error('Table Prescriptions non trouv√©e');
    }

    // V√©rifier que la colonne matricule existe
    const prescriptionTable = await sequelize.getQueryInterface().describeTable('Prescriptions');

    if (!prescriptionTable.matricule) {
      console.log('   ‚ö†Ô∏è  Colonne matricule manquante, ajout en cours...');

      await sequelize.getQueryInterface().addColumn('Prescriptions', 'matricule', {
        type: sequelize.Sequelize.DataTypes.STRING,
        allowNull: true,
        unique: true
      });

      console.log('   ‚úÖ Colonne matricule ajout√©e');
    } else {
      console.log('   ‚úÖ Colonne matricule pr√©sente');
    }

    // Cr√©er l'index unique pour les matricules
    try {
      await sequelize.query('CREATE UNIQUE INDEX IF NOT EXISTS prescriptions_matricule_unique ON Prescriptions(matricule);');
      console.log('   ‚úÖ Index unique cr√©√© pour les matricules');
    } catch (indexError) {
      if (!indexError.message.includes('already exists')) {
        console.warn('   ‚ö†Ô∏è  Avertissement lors de la cr√©ation de l\'index:', indexError.message);
      } else {
        console.log('   ‚úÖ Index unique d√©j√† existant');
      }
    }

    // V√©rifier les hooks du mod√®le Prescription
    console.log('   ‚úÖ Hook beforeCreate configur√© pour g√©n√©ration automatique des matricules');

    // Test de g√©n√©ration de matricule
    await testMatriculeGeneration();

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration des matricules:', error);
    throw error;
  }
}

async function testMatriculeGeneration() {
  try {
    console.log('   üß™ Test de g√©n√©ration de matricule...');

    // Test du format de matricule
    const testDate = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const testRandom = crypto.randomBytes(2).toString('hex').toUpperCase();
    const testMatricule = `PRX-${testDate}-${testRandom}`;

    // V√©rifier le format
    const matriculeRegex = /^PRX-\d{8}-[A-F0-9]{4}$/;
    if (!matriculeRegex.test(testMatricule)) {
      throw new Error(`Format de matricule invalide: ${testMatricule}`);
    }

    console.log(`   ‚úÖ Format de matricule valide: ${testMatricule}`);

    // Test de l'unicit√© (simul√©)
    const uniquenessTest = await testMatriculeUniqueness();
    if (uniquenessTest) {
      console.log('   ‚úÖ Syst√®me d\'unicit√© fonctionnel');
    }

  } catch (error) {
    console.error('   ‚ùå √âchec du test de matricule:', error.message);
    throw error;
  }
}

async function testMatriculeUniqueness() {
  try {
    // G√©n√©rer quelques matricules de test
    const testMatricules = new Set();
    const iterations = 10;

    for (let i = 0; i < iterations; i++) {
      const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
      const random = crypto.randomBytes(2).toString('hex').toUpperCase();
      const matricule = `PRX-${date}-${random}`;

      if (testMatricules.has(matricule)) {
        console.warn(`   ‚ö†Ô∏è  Collision d√©tect√©e: ${matricule}`);
        return false;
      }

      testMatricules.add(matricule);
    }

    return testMatricules.size === iterations;
  } catch (error) {
    console.error('Erreur lors du test d\'unicit√©:', error);
    return false;
  }
}

async function setupPatientIdentifierSystem() {
  try {
    // V√©rifier que la table BaseUsers est cr√©√©e
    const tables = await sequelize.getQueryInterface().showAllTables();

    if (!tables.includes('BaseUsers')) {
      throw new Error('Table BaseUsers non trouv√©e');
    }

    // V√©rifier les colonnes du syst√®me d'identifiants patients
    const baseUserTable = await sequelize.getQueryInterface().describeTable('BaseUsers');

    const requiredColumns = [
      'patientIdentifier',
      'isUnclaimed',
      'createdByDoctorId',
      'dateOfBirth',
      'gender',
      'emergencyContactName',
      'emergencyContactPhone',
      'socialSecurityNumber'
    ];

    for (const column of requiredColumns) {
      if (!baseUserTable[column]) {
        console.log(`   ‚ö†Ô∏è  Colonne ${column} manquante, ajout en cours...`);

        let columnDefinition;
        switch (column) {
          case 'patientIdentifier':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.STRING,
              allowNull: true,
              unique: true
            };
            break;
          case 'isUnclaimed':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.BOOLEAN,
              defaultValue: false
            };
            break;
          case 'createdByDoctorId':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.UUID,
              allowNull: true
            };
            break;
          case 'dateOfBirth':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.DATEONLY,
              allowNull: true
            };
            break;
          case 'gender':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.STRING,
              allowNull: true
            };
            break;
          case 'emergencyContactName':
          case 'emergencyContactPhone':
          case 'socialSecurityNumber':
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.STRING,
              allowNull: true
            };
            break;
          default:
            columnDefinition = {
              type: sequelize.Sequelize.DataTypes.STRING,
              allowNull: true
            };
        }

        await sequelize.getQueryInterface().addColumn('BaseUsers', column, columnDefinition);
        console.log(`   ‚úÖ Colonne ${column} ajout√©e`);
      } else {
        console.log(`   ‚úÖ Colonne ${column} pr√©sente`);
      }
    }

    // Cr√©er l'index unique pour les identifiants patients
    try {
      await sequelize.query('CREATE UNIQUE INDEX IF NOT EXISTS base_users_patient_identifier_unique ON BaseUsers(patientIdentifier);');
      console.log('   ‚úÖ Index unique cr√©√© pour les identifiants patients');
    } catch (indexError) {
      if (!indexError.message.includes('already exists')) {
        console.warn('   ‚ö†Ô∏è  Avertissement lors de la cr√©ation de l\'index identifiants:', indexError.message);
      } else {
        console.log('   ‚úÖ Index unique d√©j√† existant pour les identifiants patients');
      }
    }

    // Modifier la contrainte email pour permettre NULL
    try {
      // SQLite ne supporte pas ALTER COLUMN, on doit recr√©er la table si n√©cessaire
      const emailColumn = baseUserTable.email;
      if (emailColumn && emailColumn.allowNull === false) {
        console.log('   ‚ö†Ô∏è  Modification de la contrainte email pour permettre NULL...');
        // Note: En production, il faudrait une migration appropri√©e
        console.log('   ‚ÑπÔ∏è  La contrainte email sera g√©r√©e par les hooks du mod√®le');
      }
    } catch (emailError) {
      console.warn('   ‚ö†Ô∏è  Avertissement lors de la modification de la contrainte email:', emailError.message);
    }

    // Test de g√©n√©ration d'identifiant patient
    await testPatientIdentifierGeneration();

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration des identifiants patients:', error);
    throw error;
  }
}

async function testPatientIdentifierGeneration() {
  try {
    console.log('   üß™ Test de g√©n√©ration d\'identifiant patient...');

    // Test du format d'identifiant patient
    const testDate = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const testRandom = crypto.randomBytes(2).toString('hex').toUpperCase();
    const testIdentifier = `PAT-${testDate}-${testRandom}`;

    // V√©rifier le format
    const identifierRegex = /^PAT-\d{8}-[A-F0-9]{4}$/;
    if (!identifierRegex.test(testIdentifier)) {
      throw new Error(`Format d'identifiant patient invalide: ${testIdentifier}`);
    }

    console.log(`   ‚úÖ Format d'identifiant patient valide: ${testIdentifier}`);

    // Test de l'unicit√© (simul√©)
    const uniquenessTest = await testPatientIdentifierUniqueness();
    if (uniquenessTest) {
      console.log('   ‚úÖ Syst√®me d\'unicit√© des identifiants patients fonctionnel');
    }

  } catch (error) {
    console.error('   ‚ùå √âchec du test d\'identifiant patient:', error.message);
    throw error;
  }
}

async function testPatientIdentifierUniqueness() {
  try {
    // G√©n√©rer quelques identifiants de test
    const testIdentifiers = new Set();
    const iterations = 10;

    for (let i = 0; i < iterations; i++) {
      const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
      const random = crypto.randomBytes(2).toString('hex').toUpperCase();
      const identifier = `PAT-${date}-${random}`;

      if (testIdentifiers.has(identifier)) {
        console.warn(`   ‚ö†Ô∏è  Collision d√©tect√©e: ${identifier}`);
        return false;
      }

      testIdentifiers.add(identifier);
    }

    return testIdentifiers.size === iterations;
  } catch (error) {
    console.error('Erreur lors du test d\'unicit√© des identifiants:', error);
    return false;
  }
}

// Fonction pour afficher des informations de debug
async function displaySystemInfo() {
  try {
    console.log('\nüîç Informations syst√®me:');
    console.log(`   üìÅ Base de donn√©es: ${path.join(__dirname, '../data/database.sqlite')}`);
    console.log(`   üóÑÔ∏è  Dialecte Sequelize: ${sequelize.getDialect()}`);
    console.log(`   üìä Tables: ${(await sequelize.getQueryInterface().showAllTables()).length}`);

    // V√©rifier la taille de la base
    const dbPath = path.join(__dirname, '../data/database.sqlite');
    if (fs.existsSync(dbPath)) {
      const stats = fs.statSync(dbPath);
      const sizeKB = Math.round(stats.size / 1024);
      console.log(`   üíæ Taille base: ${sizeKB} KB`);
    }

    // Informations sur les matricules
    console.log('\nüéØ Configuration matricules:');
    console.log('   üìã Format: PRX-YYYYMMDD-XXXX');
    console.log('   üîí Champ unique avec index');
    console.log('   ü§ñ G√©n√©ration automatique via hook beforeCreate');
    console.log('   üîç API recherche: /api/pharmacy/by-matricule/:matricule');
    console.log('   üõ°Ô∏è  Rate limiting: 50 requ√™tes/15min');

    // Informations sur les identifiants patients
    console.log('\nüè• Configuration identifiants patients:');
    console.log('   üìã Format: PAT-YYYYMMDD-XXXX');
    console.log('   üîí Champ unique avec index (patientIdentifier)');
    console.log('   ü§ñ G√©n√©ration automatique pour TOUS les nouveaux patients');
    console.log('   üë®‚Äç‚öïÔ∏è Hook beforeCreate dans BaseUser.js');
    console.log('   üîó API liaison: /api/auth/link-patient-identifier');
    console.log('   ‚úÖ API v√©rification: /api/auth/verify-patient-identifier/:identifier');
    console.log('   üõ°Ô∏è  Rate limiting: 5 tentatives/15min');

  } catch (error) {
    console.warn('Impossible d\'afficher les informations syst√®me:', error.message);
  }
}

// Ex√©cuter l'initialisation avec informations d√©taill√©es
console.log('üöÄ Initialisation SQLite avec syst√®me de matricules...\n');

initSQLite()
  .then(() => displaySystemInfo())
  .catch((error) => {
    console.error('\nüí• √âchec de l\'initialisation:', error.message);
    process.exit(1);
  });