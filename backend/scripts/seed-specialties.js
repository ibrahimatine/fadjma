require('dotenv').config();
const { Specialty, DoctorSpecialty, DoctorAvailability, BaseUser } = require('../src/models');

const specialties = [
  {
    name: 'M√©decine G√©n√©rale',
    code: 'GENERAL',
    description: 'Consultation g√©n√©rale, suivi m√©dical, pr√©vention',
    dailyAppointmentLimit: 30,
    averageConsultationDuration: 20,
    color: '#3B82F6',
    icon: 'Stethoscope'
  },
  {
    name: 'Cardiologie',
    code: 'CARDIO',
    description: 'Maladies cardiovasculaires, hypertension, insuffisance cardiaque',
    dailyAppointmentLimit: 15,
    averageConsultationDuration: 30,
    color: '#EF4444',
    icon: 'Heart'
  },
  {
    name: 'P√©diatrie',
    code: 'PEDIATRIE',
    description: 'Sant√© des enfants et adolescents',
    dailyAppointmentLimit: 25,
    averageConsultationDuration: 25,
    color: '#10B981',
    icon: 'Baby'
  },
  {
    name: 'Dermatologie',
    code: 'DERMATO',
    description: 'Maladies de la peau, des cheveux et des ongles',
    dailyAppointmentLimit: 20,
    averageConsultationDuration: 20,
    color: '#F59E0B',
    icon: 'User'
  },
  {
    name: 'Radiologie',
    code: 'RADIO',
    description: 'Imagerie m√©dicale, √©chographie, scanner, IRM',
    dailyAppointmentLimit: 40,
    averageConsultationDuration: 15,
    color: '#8B5CF6',
    icon: 'Scan'
  },
  {
    name: 'Gyn√©cologie',
    code: 'GYNECO',
    description: 'Sant√© de la femme, suivi de grossesse',
    dailyAppointmentLimit: 18,
    averageConsultationDuration: 30,
    color: '#EC4899',
    icon: 'UserCircle'
  },
  {
    name: 'Ophtalmologie',
    code: 'OPHTALMO',
    description: 'Sant√© des yeux, troubles de la vision',
    dailyAppointmentLimit: 25,
    averageConsultationDuration: 20,
    color: '#06B6D4',
    icon: 'Eye'
  },
  {
    name: 'Dentisterie',
    code: 'DENT',
    description: 'Soins dentaires, orthodontie',
    dailyAppointmentLimit: 20,
    averageConsultationDuration: 30,
    color: '#14B8A6',
    icon: 'Activity'
  }
];

async function seedSpecialties() {
  try {
    console.log('üå± Seeding specialties...');

    // V√©rifier si les sp√©cialit√©s existent d√©j√†
    const existingCount = await Specialty.count();
    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  ${existingCount} sp√©cialit√©s d√©j√† pr√©sentes. Voulez-vous les remplacer?`);
      console.log('   Suppression et recr√©ation...');
      await Specialty.destroy({ where: {}, truncate: true });
    }

    // Cr√©er les sp√©cialit√©s
    const createdSpecialties = await Specialty.bulkCreate(specialties);
    console.log(`‚úÖ ${createdSpecialties.length} sp√©cialit√©s cr√©√©es`);

    // Afficher les sp√©cialit√©s cr√©√©es
    console.log('\nüìã Sp√©cialit√©s disponibles:');
    createdSpecialties.forEach(s => {
      console.log(`   - ${s.name} (${s.code}) - Limite: ${s.dailyAppointmentLimit}/jour`);
    });

    // Cr√©er des disponibilit√©s de test pour les m√©decins existants
    console.log('\nüïê Cr√©ation des disponibilit√©s de test...');

    const doctors = await BaseUser.findAll({
      where: { role: 'doctor', isActive: true }
    });

    if (doctors.length > 0) {
      console.log(`   Trouv√© ${doctors.length} m√©decin(s)`);

      let availabilityCount = 0;
      for (const doctor of doctors) {
        // Assigner une sp√©cialit√© al√©atoire au m√©decin
        const randomSpecialty = createdSpecialties[Math.floor(Math.random() * createdSpecialties.length)];

        try {
          await DoctorSpecialty.create({
            doctorId: doctor.id,
            specialtyId: randomSpecialty.id,
            isPrimary: true,
            yearsOfExperience: Math.floor(Math.random() * 20) + 1
          });

          // Cr√©er des disponibilit√©s pour la semaine
          const weekDays = [1, 2, 3, 4, 5]; // Lundi √† Vendredi
          for (const day of weekDays) {
            await DoctorAvailability.create({
              doctorId: doctor.id,
              dayOfWeek: day,
              startTime: '09:00:00',
              endTime: '17:00:00',
              slotDuration: 30,
              isActive: true
            });
            availabilityCount++;
          }

          console.log(`   ‚úì Dr. ${doctor.firstName} ${doctor.lastName} - ${randomSpecialty.name}`);
        } catch (error) {
          if (error.name === 'SequelizeUniqueConstraintError') {
            console.log(`   ‚ö†Ô∏è  Dr. ${doctor.firstName} ${doctor.lastName} d√©j√† configur√©`);
          } else {
            throw error;
          }
        }
      }

      console.log(`‚úÖ ${availabilityCount} disponibilit√©s cr√©√©es`);
    } else {
      console.log('   ‚ö†Ô∏è  Aucun m√©decin trouv√©. Cr√©ez des m√©decins d\'abord avec npm run seed');
    }

    console.log('\n‚ú® Seeding termin√© avec succ√®s!');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('   1. npm start (d√©marrer le serveur)');
    console.log('   2. Tester l\'API /api/appointments/specialties');
    console.log('   3. Cr√©er des rendez-vous via le frontend');

    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
    console.error('\nD√©tails:', error.message);
    if (error.stack) {
      console.error('Stack:', error.stack);
    }
    process.exit(1);
  }
}

seedSpecialties();