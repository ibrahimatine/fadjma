version: '3.8'

services:
  # ============================================
  # BACKEND SERVICE (Node.js + Express + Hedera)
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fadjma-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}

      # Verification Mode
      USE_MIRROR_NODE: ${USE_MIRROR_NODE:-false}

      # Database - SQLite (file stored in /app/data volume)
      # No additional database config needed for SQLite

      # JWT
      JWT_SECRET: ${JWT_SECRET:-fadjma_hackathon_secret_2025_change_in_production}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}

      # Hedera EC25519 (Primary Account)
      HEDERA_ECDSA_ACCOUNT_ID: ${HEDERA_ECDSA_ACCOUNT_ID}
      HEDERA_ECDSA_PRIVATE_KEY: ${HEDERA_ECDSA_PRIVATE_KEY}
      HEDERA_TOPIC_ID: ${HEDERA_TOPIC_ID}
      HEDERA_NETWORK: ${HEDERA_NETWORK:-testnet}

      # Hedera ECDSA (Secondary Account)
      HEDERA_ECDSA_ACCOUNT_ID: ${HEDERA_ECDSA_ACCOUNT_ID}
      HEDERA_ECDSA_PRIVATE_KEY: ${HEDERA_ECDSA_PRIVATE_KEY}
      HEDERA_ECDSA_TOPIC_ID: ${HEDERA_ECDSA_TOPIC_ID}

      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}

      # KMS Configuration
      KMS_PROVIDER: ${KMS_PROVIDER:-env}

      # Batching Configuration
      HEDERA_USE_BATCHING: ${HEDERA_USE_BATCHING:-false}
      HEDERA_MAX_BATCH_SIZE: ${HEDERA_MAX_BATCH_SIZE:-50}
      HEDERA_MIN_BATCH_SIZE: ${HEDERA_MIN_BATCH_SIZE:-10}
      HEDERA_BATCH_TIMEOUT_MS: ${HEDERA_BATCH_TIMEOUT_MS:-300000}

      # Compression Configuration
      HEDERA_USE_COMPRESSION: ${HEDERA_USE_COMPRESSION:-true}
      HEDERA_COMPRESSION_ENABLED: ${HEDERA_COMPRESSION_ENABLED:-true}
      HEDERA_MIN_COMPRESSION_SIZE: ${HEDERA_MIN_COMPRESSION_SIZE:-100}

      # Rate Limiter Configuration
      HEDERA_MAX_TPS: ${HEDERA_MAX_TPS:-8}
      HEDERA_RATE_LIMITER_ENABLED: ${HEDERA_RATE_LIMITER_ENABLED:-true}

      # Multi-Topics Configuration
      HEDERA_TOPIC_PRESCRIPTIONS: ${HEDERA_TOPIC_PRESCRIPTIONS}
      HEDERA_TOPIC_RECORDS: ${HEDERA_TOPIC_RECORDS}
      HEDERA_TOPIC_DELIVERIES: ${HEDERA_TOPIC_DELIVERIES}
      HEDERA_TOPIC_ACCESS: ${HEDERA_TOPIC_ACCESS}
      HEDERA_TOPIC_BATCH: ${HEDERA_TOPIC_BATCH}
    volumes:
      # Persist SQLite database file
      - backend-data:/app/data
      # Persist logs
      - backend-logs:/app/logs
      # Persist uploads
      - backend-uploads:/app/uploads
    networks:
      - fadjma-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # FRONTEND SERVICE (React)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fadjma-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fadjma-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# ============================================
# VOLUMES
# ============================================
volumes:
  backend-data:
    name: fadjma-backend-data
    driver: local
  backend-logs:
    name: fadjma-backend-logs
    driver: local
  backend-uploads:
    name: fadjma-backend-uploads
    driver: local

# ============================================
# NETWORKS
# ============================================
networks:
  fadjma-network:
    name: fadjma-network
    driver: bridge
